{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Digital Ocean K8s Challenge","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"0c4963fb-bd4b-5373-92fc-6a33748b7876","title":"Digital Ocean Kuberenetes Challenge","slug":"/"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Digital Ocean Kuberenetes Challenge\",\n  \"metaTitle\": \"DO K8s Challenge\",\n  \"metaDescription\": \"This is the meta description\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The goal of this challenge is to deploy a CI/CD Pipeline in a Kubernetes cluster.\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.digitalocean.com/community/pages/kubernetes-challenge\"\n  }, \"https://www.digitalocean.com/community/pages/kubernetes-challenge\")), mdx(\"h1\", null, \"DO-cicd-gitops\"), mdx(\"p\", null, \"Digital Ocean GitOps CI/CD implementation for Kubernetes\\nChallenge \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.digitalocean.com/community/pages/kubernetes-challenge\"\n  }, \"https://www.digitalocean.com/community/pages/kubernetes-challenge\")), mdx(\"h2\", null, \"Getting Started\"), mdx(\"h1\", null, \"Tools used\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"helm\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"flux\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"argocd\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tekton\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"sops\")), mdx(\"h1\", null, \"Fork and Clone the repository\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git clone https://github.com/<GITHUB_USERNAME>/DO-cicd-gitops\"))), mdx(\"h1\", null, \"Setup GPG and SOPS\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note: Detailed guide here \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://fluxcd.io/docs/guides/mozilla-sops/\"\n  }, \"https://fluxcd.io/docs/guides/mozilla-sops/\"))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"flux-system\"), \" namespace\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kubectl create ns flux-system\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install gnupg and sops\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"brew install gnupg sops\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Generate a key and get the fingerprint\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"export KEY_NAME=\\\"cluster0.yourdomain.com\\\"\\nexport KEY_COMMENT=\\\"flux secrets\\\"\\n\\ngpg --batch --full-generate-key <<EOF\\n%no-protection\\nKey-Type: 1\\nKey-Length: 4096\\nSubkey-Type: 1\\nSubkey-Length: 4096\\nExpire-Date: 0\\nName-Comment: ${KEY_COMMENT}\\nName-Real: ${KEY_NAME}\\nEOF\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"gpg --list-secret-keys \\\"${KEY_NAME}\\\"\\n\\nexport KEY_FP=1F3D1CED2F865F5E59CA564553241F147E7C5FA4\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Export the keypair into a secret\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"gpg --export-secret-keys --armor \\\"${KEY_FP}\\\" |\\nkubectl create secret generic sops-gpg \\\\\\n--namespace=flux-system \\\\\\n--from-file=sops.asc=/dev/stdin\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Update .sops.yaml\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"creation_rules:\\n  - path_regex: .*.yaml\\n    encrypted_regex: ^(data|stringData)$\\n    pgp: <KEY_FP>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Update secrets in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"./cluster/secrets\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"auth.yaml\"), \" is a basic auth secret generated with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"htpasswd\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cloudflare-secrets.yaml\"), \" is a cloudflare email and api-token secret\")))), mdx(\"h1\", null, \"Bootstrap the cluster and wait for resources to be ready\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"flux bootstrap github --owner <GITHUB_USERNAME> --repository DO-cicd-gitops --branch main --path cluster/base --components source-controller,kustomize-controller\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"kubectl get kustomizations -n flux-system -w\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#do-cicd-gitops","title":"DO-cicd-gitops","items":[{"url":"#getting-started","title":"Getting Started"}]},{"url":"#tools-used","title":"Tools used"},{"url":"#fork-and-clone-the-repository","title":"Fork and Clone the repository"},{"url":"#setup-gpg-and-sops","title":"Setup GPG and SOPS"},{"url":"#bootstrap-the-cluster-and-wait-for-resources-to-be-ready","title":"Bootstrap the cluster and wait for resources to be ready"}]},"parent":{"relativePath":"index.mdx"},"frontmatter":{"metaTitle":"DO K8s Challenge","metaDescription":"This is the meta description"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Digital Ocean Kuberenetes Challenge"}}}]}},"pageContext":{"id":"0c4963fb-bd4b-5373-92fc-6a33748b7876"}},
    "staticQueryHashes": ["2619113677","3706406642","417421954"]}