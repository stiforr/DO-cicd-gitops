{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/writeup",
    "result": {"data":{"site":{"siteMetadata":{"title":"Digital Ocean K8s Challenge","docsLocation":"https://github.com/stiforr/DO-cicd-gitops/tree/main/docs"}},"mdx":{"fields":{"id":"19261e72-ec36-53d1-a840-b7a6643ae81c","title":"Digital Ocean Kuberenetes Challenge Writeup","slug":"/writeup"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Digital Ocean Kuberenetes Challenge Writeup\",\n  \"metaTitle\": \"DO K8s Challenge\",\n  \"metaDescription\": \"This is the meta description\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"The Goal\"), mdx(\"p\", null, \"My goal was to create a platform that was easily deployed, contained reusable components, and provided visual insight into the processes. My requirements for\\nthis were:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Easy bootstrapping of a cluster\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reusable pipeline components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dashboards\")), mdx(\"h1\", null, \"Easy Bootstrapping\"), mdx(\"p\", null, \"Because ArgoCD doesn't have an easy way to bootstrap a cluster, I used FluxCD to do it.\\nIn the folder \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cluster/base/\"), \", are the manifests used to bootstrap the cluster.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"kustomizations/\"), \" contains the list of workloads that will be initially deployed on the cluster.\", mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"See \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cluster/base/kustomizations/kustomization.yaml\"), \" for a list.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"flux-system/\"), \" contains the FluxCD manifests used to install Flux.\")), mdx(\"h1\", null, \"Reusable Pipeline Components\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A catalog of reusable Tekton resources can be found here \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/tektoncd/catalog\"\n  }, \"https://github.com/tektoncd/catalog\"))), mdx(\"p\", null, \"There are several components, some would say a lot, that go into a Tekton pipeline. Which is why one\\nof my goals was to make as many of them reusable. However, it can be thought of in a sort of order of operations.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"EventListener (\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://tekton.dev/docs/triggers/eventlisteners/\"\n  }, \"https://tekton.dev/docs/triggers/eventlisteners/\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"TriggerBinding (\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://tekton.dev/docs/triggers/triggerbindings/\"\n  }, \"https://tekton.dev/docs/triggers/triggerbindings/\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"TriggerTemplate (\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://tekton.dev/docs/triggers/triggertemplates/\"\n  }, \"https://tekton.dev/docs/triggers/triggertemplates/\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"PipelineRun (\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://tekton.dev/docs/pipelines/pipelineruns/\"\n  }, \"https://tekton.dev/docs/pipelines/pipelineruns/\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pipeline (\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://tekton.dev/docs/pipelines/pipelines/\"\n  }, \"https://tekton.dev/docs/pipelines/pipelines/\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Task (\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://tekton.dev/docs/pipelines/tasks/\"\n  }, \"https://tekton.dev/docs/pipelines/tasks/\"), \")\")), mdx(\"p\", null, \"I'll describe the main goals of each and a bit about how I made them reusable.\"), mdx(\"h3\", null, \"EventListener\"), mdx(\"p\", null, \"The Event Listener runs as a workload in the cluster and receives incoming events, for example from a webhook. It's also responsible for\\ndefining a TriggerBinding and TriggerTemplate.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"apiVersion: triggers.tekton.dev/v1beta1\\nkind: EventListener\\nmetadata:\\n  name: remix-jokes-el\\nspec:\\n  serviceAccountName: tekton-triggers-admin\\n  triggers:\\n    - bindings:\\n        - ref: remix-jokes-tb\\n      template:\\n        ref: remix-jokes-tt\\n\")), mdx(\"h3\", null, \"Trigger Binding\"), mdx(\"p\", null, \"The Trigger Binding extracts fields from the incoming event and assigns them to params.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"apiVersion: triggers.tekton.dev/v1beta1\\nkind: TriggerBinding\\nmetadata:\\n  name: remix-jokes-tb\\nspec:\\n  params:\\n    - name: git-app-repo-url\\n      value: $(body.repository.url)\\n    - name: git-app-repo-revision\\n      value: main\\n\")), mdx(\"h3\", null, \"Trigger Template\"), mdx(\"p\", null, \"A Trigger Template is a blueprint for a resource such as a PipelineRun. It receives params from the TriggerBinding,\\nallowing them to be passed down to the PipelineRun and, in turn, the rest of the components.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"apiVersion: triggers.tekton.dev/v1alpha1\\nkind: TriggerTemplate\\nmetadata:\\n  name: remix-jokes-tt\\nspec:\\n  params:\\n    - name: git-app-repo-url\\n      description: The git repository URL for the application.\\n    - name: git-app-repo-revision\\n      description: The git revision for the application.\\n\\n  resourcetemplates:\\n    - apiVersion: tekton.dev/v1beta1\\n      kind: PipelineRun\\n      metadata:\\n        generateName: buildpack-test-pr-\\n        namespace: tekton-argocd-example\\n        labels:\\n          pipeline: tekton\\n          deploy: argocd\\n        annotations:\\n          argocd.argoproj.io/compare-options: IgnoreExtraneous\\n      spec:\\n        workspaces:\\n          - name: source-workspace\\n            subPath: source\\n            persistentVolumeClaim:\\n              claimName: buildpacks-source-pvc\\n          - name: cache-workspace\\n            subPath: cache\\n            persistentVolumeClaim:\\n              claimName: buildpacks-source-pvc\\n        params:\\n          - name: image\\n            value: stiforr/buildback-test\\n          - name: argocdServer\\n            value: stiforr.com\\n          - name: applicationName\\n            value: buildpack-test\\n          - name: dockerImage\\n            value: remix-jokes\\n          - name: dockerNamespace\\n            value: stiforr\\n          - name: git-app-repo-url\\n            value: $(tt.params.git-app-repo-url)\\n        serviceAccountName: pipeline-sa\\n        pipelineRef:\\n          name: buildpacks-test-pipeline\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Note the use of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"generateName: buildpack-test-pr-\"), \" in the PipelineRun. This resource is generated dynamically,\\nso no two PipelineRuns will have the same name.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"argocd.argoproj.io/compare-options: IgnoreExtraneous\"), \" prevents argo from getting upset when these PipelineRuns\\nare generated but are not part of the repo.\")), mdx(\"h3\", null, \"Pipeline Run\"), mdx(\"p\", null, \"The Pipeline Run is generated by the TriggerTemplate, takes in the params from the TriggerTemplate, and\\nrefers to a Pipeline. This is the most useful resource to make reusable.\"), mdx(\"p\", null, \"You can see the PipelineRun in the TriggerTemplate under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"resourceTemplates:\"), \". Here we define workspaces, params, a serviceAccountName,\\nand a pipelineRef. I'll let the Tekton docs do the explaining for these resources.\"), mdx(\"h4\", null, \"Workspaces\"), mdx(\"p\", null, \"(\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tekton.dev/docs/pipelines/workspaces/\"\n  }, \"https://tekton.dev/docs/pipelines/workspaces/\"), \")\"), mdx(\"p\", null, \"Workspaces can serve the following purposes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Storage of inputs and/or outputs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sharing data among Tasks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A mount point for credentials held in Secrets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A mount point for configurations held in ConfigMaps\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A mount point for common tools shared by an organization\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A cache of build artifacts that speed up jobs\")), mdx(\"h4\", null, \"Params\"), mdx(\"p\", null, \"Params contain a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \", a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \", and an optional \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"description\"), \".\"), mdx(\"h4\", null, \"Service Account Name\"), mdx(\"p\", null, \"If you need to use secrets in your Pipeline, you'll need to give access to them. You would create the secrets and specify them\\nin the ServiceAccount.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"apiVersion: v1\\nkind: ServiceAccount\\nmetadata:\\n  name: pipeline-sa\\nsecrets:\\n  - name: basic-docker-user-pass\\n  - name: basic-git-app-repo-user-pass\\n\")), mdx(\"p\", null, \"You can execute the Pipeline in your PipelineRun with a specific set of credentials by specifying a\\nServiceAccount object name in the serviceAccountName field in your PipelineRun definition.\\nIf you do not explicitly specify this, the TaskRuns created by your PipelineRun will execute with\\nthe credentials specified in the configmap-defaults ConfigMap. If this default is not specified, the\\nTaskRuns will execute with the default service account set for the target namespace.\"), mdx(\"h4\", null, \"Pipeline Ref\"), mdx(\"p\", null, \"(\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://tekton.dev/docs/pipelines/pipelineruns/#specifying-the-target-pipeline\"\n  }, \"https://tekton.dev/docs/pipelines/pipelineruns/#specifying-the-target-pipeline\"), \")\"), mdx(\"p\", null, \"You must specify the target Pipeline that you want the PipelineRun to execute, either by referencing an existing Pipeline definition, or embedding a Pipeline definition directly in the PipelineRun.\"), mdx(\"p\", null, \"To specify the target Pipeline by reference, use the pipelineRef field:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"pipelineRef:\\n  name: buildpacks-test-pipeline\\n\")), mdx(\"h1\", null, \"Dashboards\"), mdx(\"p\", null, \"I use ArgoCD's built in dashboard to specifically monitor the Pipelines and the apps they deploy. The Tekton Dashboard\\nis also used to monitor the Pipelines.\"), mdx(\"h1\", null, \"Thanks!\"), mdx(\"p\", null, \"If you made it this far, thanks! I hope this helps clarify how Tekton and GitOps can be used to automate\\nyour workflows and give your developers more power in your infrastructure.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#the-goal","title":"The Goal"},{"url":"#easy-bootstrapping","title":"Easy Bootstrapping"},{"url":"#reusable-pipeline-components","title":"Reusable Pipeline Components","items":[{"items":[{"url":"#eventlistener","title":"EventListener"},{"url":"#trigger-binding","title":"Trigger Binding"},{"url":"#trigger-template","title":"Trigger Template"},{"url":"#pipeline-run","title":"Pipeline Run","items":[{"url":"#workspaces","title":"Workspaces"},{"url":"#params","title":"Params"},{"url":"#service-account-name","title":"Service Account Name"},{"url":"#pipeline-ref","title":"Pipeline Ref"}]}]}]},{"url":"#dashboards","title":"Dashboards"},{"url":"#thanks","title":"Thanks!"}]},"parent":{"relativePath":"writeup.mdx"},"frontmatter":{"metaTitle":"DO K8s Challenge","metaDescription":"This is the meta description"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Digital Ocean Kuberenetes Challenge"}}},{"node":{"fields":{"slug":"/writeup","title":"Digital Ocean Kuberenetes Challenge Writeup"}}}]}},"pageContext":{"id":"19261e72-ec36-53d1-a840-b7a6643ae81c"}},
    "staticQueryHashes": ["2619113677","3706406642","417421954"]}